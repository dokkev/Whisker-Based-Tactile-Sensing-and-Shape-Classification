#!/usr/bin/env python3
import rospy
import math
import numpy as np
from std_msgs.msg import Float32
from pynput import keyboard
from whisker_ros.msg import State



def get_Rx(theta):
    R = np.array([[1.,0.,0.],[0., np.cos(theta), -np.sin(theta)],[0.,np.sin(theta), np.cos(theta)]])
    return R

def get_Ry(theta):
    R = np.array([[np.cos(theta),0.,np.sin(theta)],[0., 1., 0.],[-np.sin(theta),0., np.cos(theta)]])
    return R

def get_Rz(theta):
    theta = theta
    R = np.array([[np.cos(theta),-np.sin(theta),0.],[np.sin(theta), np.cos(theta), 0.],[0.,0., 1.]])
    return R

def update_roll(state,turn_size,next_step,orientation):
    state[5] += turn_size

    if np.abs(state[5])>=2*np.pi:
        state[5] = 0.
    
    # get roll
    Rz = get_Rz(state[5])
    # get yaw
    Rx = get_Rx(state[4])

    next_step = np.dot(Rz,orientation)
    # next_step = np.dot(Rx,next_step)
    return next_step

def update_pitch(state,turn_size,next_step,orientation):
    
    state[4] += turn_size

    if np.abs(state[4])>=2*np.pi:
        state[4] = 0.
    
    # get roll
    Rz = get_Rz(state[5])
    # get yaw
    Ry = get_Ry(state[4])

    next_step = np.dot(Ry,orientation)

    return next_step

state = np.array([0.,0.,0.,0.,0.,0.])
turn_size = 0.02
step_size = 0.3
orientation = np.array([0.,step_size,0.])
next_step = np.array([0.,step_size,0.])



if __name__ == '__main__':
    rospy.init_node('keyboard_control', anonymous=True)
    pub = rospy.Publisher('/rat_state', State, queue_size=10)
    time_pub = rospy.Publisher('/time', Float32, queue_size=10)

    state_msg = State()
    t = 0
    
    while not rospy.is_shutdown():
        if keyboard.is_pressed("w"):
            state[0:3] += next_step
        if keyboard.is_pressed("s"):
            state[0:3] -= next_step
        if keyboard.is_pressed("a"):
            next_step = update_roll(state,turn_size,next_step,orientation)
        if keyboard.is_pressed("d"):
            next_step = update_roll(state,-turn_size,next_step,orientation)

        state_msg.x = state[0]
        state_msg.y = state[1]
        state_msg.z = state[2]
        state_msg.yaw = state[3]
        state_msg.pitch = state[4]
        state_msg.roll = state[5]

        t += 0.01
        pub.publish(state_msg)
        time_pub.publish(t)

