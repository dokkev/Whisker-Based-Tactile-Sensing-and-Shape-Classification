#!/usr/bin/env python3

import rospy
import numpy as np
import zmq
import msgpack
import pygame
from pygame.locals import *
from io import BytesIO
import sys
from std_msgs.msg import Int8
from whisker_ros.msg import WhiskerData
from whisker_ros.msg import Contact

"""
This ROS node provides communication between the WHISKiT Physics Simulator and ROS
while it provides GUI for the rat control
WHISKiT physics simulator has to be running in order to use this node.
Converting data from the simulator to ROS topics, this node update the transformation of the rat head.



"""


def get_Rx(theta):
    R = np.array([[1.,0.,0.],[0., np.cos(theta), -np.sin(theta)],[0.,np.sin(theta), np.cos(theta)]])
    return R

def get_Ry(theta):
    R = np.array([[np.cos(theta),0.,np.sin(theta)],[0., 1., 0.],[-np.sin(theta),0., np.cos(theta)]])
    return R

def get_Rz(theta):
    theta = theta
    R = np.array([[np.cos(theta),-np.sin(theta),0.],[np.sin(theta), np.cos(theta), 0.],[0.,0., 1.]])
    return R

def update_roll(state,turn_size,next_step,orientation):
    state[5] += turn_size

    if np.abs(state[5])>=2*np.pi:
        state[5] = 0.
    
    # get roll
    Rz = get_Rz(state[5])
    # get yaw
    Rx = get_Rx(state[4])

    next_step = np.dot(Rz,orientation)
    # next_step = np.dot(Rx,next_step)
    return next_step

def update_pitch(state,turn_size,next_step,orientation):
    
    state[4] += turn_size

    if np.abs(state[4])>=2*np.pi:
        state[4] = 0.
    
    # get roll
    Rz = get_Rz(state[5])
    # get yaw
    Ry = get_Ry(state[4])

    next_step = np.dot(Ry,orientation)

    return next_step


class Communicator:
    def __init__(self):

        # Publish whisker data ROS topic
        self.force_pub = rospy.Publisher("/raw_whisker_force", WhiskerData, queue_size=10)
        self.moment_pub = rospy.Publisher("/raw_whisker_moment", WhiskerData, queue_size=10)
        self.pos_pub = rospy.Publisher("/raw_whisker_position", WhiskerData, queue_size=10)
        self.contact_pub = rospy.Publisher("/contact_indicator", Contact, queue_size=10)
        self.bcontact_pub = rospy.Publisher("binary_contact_indicator",Contact, queue_size=10)
        self.raw_contact_pub = rospy.Publisher("/raw_whisker_contact",Contact, queue_size=10)
        self.contact_pos_pub = rospy.Publisher("/whisker_contact_position",WhiskerData,queue_size=10)
        self.contact_status_pub = rospy.Publisher("/contact_status",Int8,queue_size=10)
        self.contact_sum_pub = rospy.Publisher("/contact_sum",Contact,queue_size=10)
        self.counter = 0
        self.contact_sum = []

       
    def publish_whisker_data(self,data):
        fx = np.array(data[0]).flatten()
        fy = np.array(data[1]).flatten()
        fz = np.array(data[2]).flatten()
        mx = np.array(data[3]).flatten()
        my = np.array(data[4]).flatten()
        mz = np.array(data[5]).flatten()
        c = np.array(data[6])
        c_flat = c.flatten()
        x = np.array(data[7]).flatten()
        y = np.array(data[8]).flatten()
        z = np.array(data[9]).flatten()

        # initailize message
        whisker_data_msg = WhiskerData()
        
        # publish force data
        whisker_data_msg.x = fx
        whisker_data_msg.y = fy
        whisker_data_msg.z = fz
        self.force_pub.publish(whisker_data_msg)

        # publish moment data
        whisker_data_msg.x = mx
        whisker_data_msg.y = my
        whisker_data_msg.z = mz
        self.moment_pub.publish(whisker_data_msg)

        # publish position data
        whisker_data_msg.x = x
        whisker_data_msg.y = y
        whisker_data_msg.z = z
        self.pos_pub.publish(whisker_data_msg)
        # print(whisker_data_msg)
        
        ##########################
        ## publish contact data ##
        ##########################

        # sum contact along segments
        contact_indicator = np.sum(c,axis=1)
        contact_msg = Contact()
        contact_msg.contact = contact_indicator
        self.contact_pub.publish(contact_msg)

        for i in range(len(contact_indicator)):
            if contact_indicator[i] >= 1:
                contact_indicator[i] = 1
            else:
                contact_indicator[i] = 0

        binary_contact_indicator = contact_indicator
        contact_msg.contact = contact_indicator

        self.bcontact_pub.publish(contact_msg)
        print(self.counter)
        # summation of binary contact for one cycle of whisking
        if self.counter < int(125):
            self.contact_sum.append(list(binary_contact_indicator))
            # print(self.contact_sum, self.counter)
            # print(len(self.contact_sum))
            self.counter +=int(1)
        elif self.counter == int(125):
            contact_sum = np.array(self.contact_sum)
            contact_sum = np.sum(contact_sum,axis=0)
            contact_sum_msg = Contact()
            contact_sum_msg.contact = contact_sum
            self.contact_sum_pub.publish(contact_sum_msg)
            self.counter = 0
            self.contact_sum = []



        raw_contact_msg = Contact()
        raw_contact_msg.contact = c_flat
        self.raw_contact_pub.publish(raw_contact_msg)

        # publish contact status
        contact_status = np.sum(c_flat)
        if contact_status == 0:
            contact_status = 0
        else:
            contact_status = 1
        self.contact_status_pub.publish(contact_status)


    def process_contact(self,data):
        c = np.array(data[6])
        x = np.array(data[7])
        y = np.array(data[8])
        z = np.array(data[9])

        contact_x, contact_y, contact_z = [],[],[]
        for i in range(len(c)):
            for j in range(len(c[0])):
    
                # if the collision data is 1, then we will extract the position of the contact
                if int(c[i,j]) == int(1):
                    contact_x.append(float(x[i,j]))
                    contact_y.append(float(y[i,j]))
                    contact_z.append(float(z[i,j]))

        contact_msg = WhiskerData()
        contact_msg.x = contact_x
        contact_msg.y = contact_y
        contact_msg.z = contact_z
        self.contact_pos_pub.publish(contact_msg)




    
    def main(self):
        WINSIZE = (720, 960)
        # initialize the node
        rospy.init_node("communicator")
        
        context = zmq.Context()
    
        socket = context.socket(zmq.REP)
        socket.bind("tcp://*:5555")

        unpacker = msgpack.Unpacker()
        packer = msgpack.Packer()
        
        # initial condition
        state = np.array([0.,0.,0.,0.,0.,0.])

        pygame.init()
        screen = pygame.display.set_mode(WINSIZE)
        screen.fill((255,255,255))

        pygame.key.set_repeat(1, 10)
        turn_size = 0.02
        step_size = 0.3
        orientation = np.array([0.,step_size,0.])
        pitchaxis = np.array([0.,0.,0.])
        global next_step
        next_step = np.array([0.,step_size,0.])
        
        print("And let's go!!!")
        t = 0
        while not rospy.is_shutdown():
            
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                if event.type == pygame.KEYDOWN:
                    
                    # go backward
                    if event.key == pygame.K_s:
                        state[0:3] -= next_step

                    # go forward
                    if event.key == pygame.K_w:
                        state[0:3] += next_step

                    # look up
                    if event.key == pygame.K_UP:
                        next_step = update_pitch(state,turn_size,next_step,orientation)
                    
                    # look down
                    if event.key == pygame.K_DOWN:
                        next_step = update_pitch(state,-turn_size,next_step,orientation)

                    # turn right
                    if event.key == pygame.K_d:
                        next_step = update_roll(state,-turn_size,next_step,orientation)
            
                    # turn left
                    if event.key == pygame.K_a:
                        next_step = update_roll(state,turn_size,next_step,orientation)
    

            # get info from c++
            unpacker.feed(socket.recv())
            # empty array to store dynamic data
            Y = []

            # Let's unpack the data we recievd
            for values in unpacker:
                    Y.append(np.array(values))
        
            # since we are getting real-time data, we only have one row while columna represent whiskers
    
            # publish whisker data
            self.publish_whisker_data(Y)
            self.process_contact(Y)

            X = [state]
            buffer = BytesIO()
            for x in X:
                buffer.write(packer.pack(list(x)))

            socket.send(buffer.getvalue() )

            t += 0.01

            # End node with Ctrl+C
            if rospy.is_shutdown():
                print('shutdown')
                break




if __name__ == '__main__':
    C = Communicator()
    C.main()